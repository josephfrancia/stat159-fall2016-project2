as.numeric(summary(data$Cards)[6]-summary(data$Cards)[1]) #Range
sd(data$Cards) #Standard Deviation
print("Statistics for Age Variable")
summary(data$Age)
as.numeric((summary(data$Age))[5]-(summary(data$Age))[2]) #IQR
as.numeric(summary(data$Age)[6]-summary(data$Age)[1]) #Range
sd(data$Age) #Standard Deviation
print("Statistics for Education Variable")
summary(data$Education)
as.numeric((summary(data$Education))[5]-(summary(data$Education))[2]) #IQR
as.numeric(summary(data$Education)[6]-summary(data$Education)[1]) #Range
sd(data$Education) #Standard Deviation
print("Statistics for Balance Variable")
summary(data$Balance)
as.numeric((summary(data$Balance))[5]-(summary(data$Balance))[2]) #IQR
as.numeric(summary(data$Balance)[6]-summary(data$Balance)[1]) #Range
sd(data$Balance) #Standard Deviation
sink()
#quant-variables.txt
print("quant-variables.txt")
sink(file="../data/quant-variables.txt")
print("Statistics for Income Variable")
summary(data$Income)
as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
sd(data$Income) #Standard Deviation
print("Statistics for Limit Variable")
summary(data$Limit)
as.numeric((summary(data$Limit))[5]-(summary(data$Limit))[2]) #IQR
as.numeric(summary(data$Limit)[6]-summary(data$Limit)[1]) #Range
sd(data$Limit) #Standard Deviation
print("Statistics for Rating Variable")
summary(data$Rating)
as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
sd(data$Rating) #Standard Deviation
print("Statistics for Cards Variable")
summary(data$Cards)
as.numeric((summary(data$Cards))[5]-(summary(data$Cards))[2]) #IQR
as.numeric(summary(data$Cards)[6]-summary(data$Cards)[1]) #Range
sd(data$Cards) #Standard Deviation
print("Statistics for Age Variable")
summary(data$Age)
as.numeric((summary(data$Age))[5]-(summary(data$Age))[2]) #IQR
as.numeric(summary(data$Age)[6]-summary(data$Age)[1]) #Range
sd(data$Age) #Standard Deviation
print("Statistics for Education Variable")
summary(data$Education)
as.numeric((summary(data$Education))[5]-(summary(data$Education))[2]) #IQR
as.numeric(summary(data$Education)[6]-summary(data$Education)[1]) #Range
sd(data$Education) #Standard Deviation
print("Statistics for Balance Variable")
summary(data$Balance)
as.numeric((summary(data$Balance))[5]-(summary(data$Balance))[2]) #IQR
as.numeric(summary(data$Balance)[6]-summary(data$Balance)[1]) #Range
sd(data$Balance) #Standard Deviation
sink()
data[,X]
data[,1]
data=data[,-1]
View(data)
cor(data[, -c(7,8,9,10)])
View(data)
#Income Histogram
png(filename="../images/histogram-Income.png")
hist(data$Income, main="Histogram of Income", xlab="Income")
dev.off()
boxplot(data$Balance)
#Income Histogram
png(filename="../images/histogram-Income.png")
hist(data$Income, main="Histogram of Income", xlab="Income")
dev.off()
#Limit Histogram
png(filename="../images/histogram-Limit.png")
hist(data$Limit, main="Histogram of Limit", xlab="Limit")
dev.off()
#Rating Histogram
png(filename="../images/histogram-Rating.png")
hist(data$Rating, main="Histogram of Rating", xlab="Rating")
dev.off()
#Cards Histogram
png(filename="../images/histogram-Cards.png")
hist(data$Cards, main="Histogram of Credit Cards", xlab="Number of Credit Cards")
dev.off()
#Age Histogram
png(filename="../images/histogram-Age.png")
hist(data$Age, main="Histogram of Age", xlab="Age")
dev.off()
#Education Histogram
png(filename="../images/histogram-Education.png")
hist(data$Education, main="Histogram of Years of Education", xlab="Years of Education")
dev.off()
#Balance Histogram
png(filename="../images/histogram-Balance.png")
hist(data$Balance, main="Histogram of Balance", xlab="Balance")
dev.off()
#Income Boxplot
png(filename="../images/boxplot-Income.png")
boxplot(data$Income, main="Boxplot of Income", ylab="Income")
dev.off()
#Limit Boxplot
png(filename="../images/boxplot-Limit.png")
boxplot(data$Limit, main="Boxplot of Limit", ylab="Limit")
dev.off()
#Rating Boxplot
png(filename="../images/boxplot-Rating.png")
boxplot(data$Rating, main="Boxplot of Rating", ylab="Rating")
dev.off()
#Cards Boxplot
png(filename="../images/boxplot-Cards.png")
boxplot(data$Cards, main="Boxplot of Credit Cards", ylab="Number of Credit Cards")
dev.off()
#Age Boxplot
png(filename="../images/boxplot-Age.png")
boxplot(data$Age, main="Boxplot of Age", xlab="Age")
dev.off()
#Education Boxplot
png(filename="../images/boxplot-Education.png")
boxplot(data$Education, main="Boxplot of Years of Education", ylab="Years of Education")
dev.off()
#Balance Boxplot
png(filename="../images/boxplot-Balance.png")
boxplot(data$Balance, main="Boxplot of Balance", ylab="Balance")
dev.off()
data=read.xls("/Users/josephfrancia/Desktop/Fall_2016/Economic Development/Procededata.xlsx")
library(xlsx)
data=read.xls("/Users/josephfrancia/Desktop/Fall_2016/Economic Development/Procededata.xlsx")
data=read.xlsx("/Users/josephfrancia/Desktop/Fall_2016/Economic Development/Procededata.xlsx")
data=read.xlsx2("/Users/josephfrancia/Desktop/Fall_2016/Economic Development/Procededata.xlsx")
dataset=data.frame()
colnames(dataset)=c("Entrance Exam Grades", "High School Dropout Rate", "Final Exam Score at End of High School")
dataset=data.frame(nrow=10, ncol=3)
colnames(dataset)=c("Entrance Exam Grades", "High School Dropout Rate", "Final Exam Score at End of High School")
colnames(dataset)=c("entrance_exam", "drop_out", "final_exam")
dataset
dataset=data.frame(as.matrix(nrow=10, ncol=3))
dataset=data.frame()
colnames(dataset)=c("entrance_exam", "drop_out", "final_exam")
data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(dataset)=c("entrance_exam", "drop_out", "final_exam")
dataset=data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(dataset)=c("entrance_exam", "drop_out", "final_exam")
#Regression Discontinuity Problem
dataset=data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(dataset)=c("entrance_exam", "drop_out", "final_exam")
dataset$entrance_exam=c(4,3,2,1,0,-1,-2,-3,-4,-5)
dataset$drop_out=c(50, 48, 49.8, 49.5, 51, 43, 44.5,42.5,42.5,45)
dataset$final_exam=c(.68,.62,.52,.45,.5,.3,.2,.25,.17,.11)
```{r, echo=FALSE}
#Regression Discontinuity Problem
dataset=data.frame(matrix(NA, nrow = 10, ncol = 4))
colnames(dataset)=c("entrance_exam", "drop_out", "final_exam", "elite")
dataset$elite=c(1,1,1,1,1,0,0,0,0,0)
dataset$entrance_exam=c(4,3,2,1,0,-1,-2,-3,-4,-5)
dataset$drop_out=c(50, 48, 49.8, 49.5, 51, 43, 44.5,42.5,42.5,45)
dataset$final_exam=c(.68,.62,.52,.45,.5,.3,.2,.25,.17,.11)
plot(dataset$entrance_exam,dataset$drop_out)
plot(dataset$entrance_exam,dataset$drop_out, xlab="Entrance Exam Grade - Cutoff Score", ylab="Dropout Rates")
plot(dataset$entrance_exam,dataset$drop_out, xlab="Entrance Exam Grade - Cutoff Score", ylab="Dropout Rates", main="Relationship Between Dropout Rates and Entrance Exam Grades")
lm_elite=lm(drop_out~entrance_exam, data=dataset[which(dataset$elite==1),])
lm_elite=lm(drop_out~entrance_exam, data=dataset[which(dataset$elite==1),])
lm_nonelite=lm(drop_out~entrance_exam, data=dataset[which(dataset$elite==0),])
plot(dataset$entrance_exam,dataset$drop_out, xlab="Entrance Exam Grade - Cutoff Score", ylab="Dropout Rates", main="Relationship Between Dropout Rates and Entrance Exam Grades")
abline(lm_elite)
abline(lm_nonelite)
?abline
abline(v=0)
predict(lm_elite,0)-predict(lm_nonelite,0)
?predict()
predict(lm_elite)
predict(lm_elite,newdata=0)-predict(lm_nonelite,newdata0)
fake_data=data.frame(0)
fake
fake_data=data.frame(0)
fake=data.frame(matrix(NA, nrow = 1, ncol = 1))
colnames(fake)=c("entrance_exam")
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
fake=data.frame(matrix(0, nrow = 1, ncol = 1))
colnames(fake)=c("entrance_exam")
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
predict(lm_elite,newdata=fake)
predict(lm_nonelite,fake)
{r, echo=FALSE}
lm_elite=lm(drop_out~final_exam, data_eli=dataset[which(dataset$elite==1),])
lm_nonelite=lm(drop_out~entrance_exam, data=dataset[which(dataset$elite==0),])
plot(dataset$entrance_exam,dataset$final_exam, xlab="Entrance Exam Grade - Cutoff Score", ylab="Final Exam Scores", main="Relationship Between Final Exam Scores and Entrance Exam Grades")
abline(lm_elite)
abline(lm_nonelite)
abline(v=0)
fake=data.frame(matrix(0, nrow = 1, ncol = 1))
colnames(fake)=c("entrance_exam")
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
lm_elite=lm(drop_out~final_exam, data=dataset[which(dataset$elite==1),])
lm_nonelite=lm(drop_out~entrance_exam, data=dataset[which(dataset$elite==0),])
plot(dataset$entrance_exam,dataset$final_exam, xlab="Entrance Exam Grade - Cutoff Score", ylab="Final Exam Scores", main="Relationship Between Final Exam Scores and Entrance Exam Grades")
abline(lm_elite)
abline(lm_nonelite)
abline(v=0)
fake=data.frame(matrix(0, nrow = 1, ncol = 1))
colnames(fake)=c("entrance_exam")
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
```
{r, echo=FALSE}
lm_eliteD=lm(drop_out~final_exam, data=dataset[which(dataset$elite==1),])
lm_noneliteD=lm(drop_out~entrance_exam, data=dataset[which(dataset$elite==0),])
plot(dataset$entrance_exam,dataset$final_exam, xlab="Entrance Exam Grade - Cutoff Score", ylab="Final Exam Scores", main="Relationship Between Final Exam Scores and Entrance Exam Grades")
abline(lm_eliteD)
abline(lm_noneliteD)
abline(v=0)
abline(lm_eliteD)
lm_eliteD
{r, echo=FALSE}
lm_eliteD=lm(drop_out~final_exam, data=dataset[which(dataset$elite==1),])
lm_noneliteD=lm(drop_out~final_exam, data=dataset[which(dataset$elite==0),])
abline(lm_eliteD)
abline(lm_noneliteD)
lm_eliteD
lm_eliteD=lm(final_exam~entrance_exam, data=dataset[which(dataset$elite==1),])
lm_noneliteD=lm(final_exam~entrance_exam, data=dataset[which(dataset$elite==0),])
plot(dataset$entrance_exam,dataset$final_exam, xlab="Entrance Exam Grade - Cutoff Score", ylab="Final Exam Scores", main="Relationship Between Final Exam Scores and Entrance Exam Grades")
abline(lm_eliteD)
abline(lm_noneliteD)
abline(v=0)
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
fake=data.frame(matrix(0, nrow = 1, ncol = 1))
colnames(fake)=c("final_exam")
predict(lm_elite,newdata=fake)-predict(lm_nonelite,fake)
colnames(fake)=c("final_exam")
fake
predict(lm_eliteD,fake)-predict(lm_noneliteD,fake)
predict(lm_eliteD,fake)-predict(lm_noneliteD,fake)
colnames(fake)=c("entrance_exam")
predict(lm_eliteD,fake)-predict(lm_noneliteD,fake)
#quant-variables.txt
print("quant-variables.txt")
sink(file="../data/quant-variables.txt")
print("Statistics for Income Variable")
summary(data$Income)
as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
sd(data$Income) #Standard Deviation
print("Statistics for Limit Variable")
summary(data$Limit)
as.numeric((summary(data$Limit))[5]-(summary(data$Limit))[2]) #IQR
as.numeric(summary(data$Limit)[6]-summary(data$Limit)[1]) #Range
sd(data$Limit) #Standard Deviation
print("Statistics for Rating Variable")
summary(data$Rating)
as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
sd(data$Rating) #Standard Deviation
print("Statistics for Cards Variable")
summary(data$Cards)
as.numeric((summary(data$Cards))[5]-(summary(data$Cards))[2]) #IQR
as.numeric(summary(data$Cards)[6]-summary(data$Cards)[1]) #Range
sd(data$Cards) #Standard Deviation
print("Statistics for Age Variable")
summary(data$Age)
as.numeric((summary(data$Age))[5]-(summary(data$Age))[2]) #IQR
as.numeric(summary(data$Age)[6]-summary(data$Age)[1]) #Range
sd(data$Age) #Standard Deviation
print("Statistics for Education Variable")
summary(data$Education)
as.numeric((summary(data$Education))[5]-(summary(data$Education))[2]) #IQR
as.numeric(summary(data$Education)[6]-summary(data$Education)[1]) #Range
sd(data$Education) #Standard Deviation
print("Statistics for Balance Variable")
summary(data$Balance)
as.numeric((summary(data$Balance))[5]-(summary(data$Balance))[2]) #IQR
as.numeric(summary(data$Balance)[6]-summary(data$Balance)[1]) #Range
sd(data$Balance) #Standard Deviation
print("Matrix of Correlations")
cor(data[, -c(7,8,9,10)])
sink()
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code")
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
quant-variables.txt
print("quant-variables.txt")
sink(file="../data/quant-variables.txt")
print("Statistics for Income Variable")
summary(data$Income)
as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
sd(data$Income) #Standard Deviation
print("Statistics for Limit Variable")
summary(data$Limit)
as.numeric((summary(data$Limit))[5]-(summary(data$Limit))[2]) #IQR
as.numeric(summary(data$Limit)[6]-summary(data$Limit)[1]) #Range
sd(data$Limit) #Standard Deviation
print("Statistics for Rating Variable")
summary(data$Rating)
as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
sd(data$Rating) #Standard Deviation
print("Statistics for Cards Variable")
summary(data$Cards)
as.numeric((summary(data$Cards))[5]-(summary(data$Cards))[2]) #IQR
as.numeric(summary(data$Cards)[6]-summary(data$Cards)[1]) #Range
sd(data$Cards) #Standard Deviation
print("Statistics for Age Variable")
summary(data$Age)
as.numeric((summary(data$Age))[5]-(summary(data$Age))[2]) #IQR
as.numeric(summary(data$Age)[6]-summary(data$Age)[1]) #Range
sd(data$Age) #Standard Deviation
print("Statistics for Education Variable")
summary(data$Education)
as.numeric((summary(data$Education))[5]-(summary(data$Education))[2]) #IQR
as.numeric(summary(data$Education)[6]-summary(data$Education)[1]) #Range
sd(data$Education) #Standard Deviation
print("Statistics for Balance Variable")
summary(data$Balance)
as.numeric((summary(data$Balance))[5]-(summary(data$Balance))[2]) #IQR
as.numeric(summary(data$Balance)[6]-summary(data$Balance)[1]) #Range
sd(data$Balance) #Standard Deviation
print("Matrix of Correlations")
cor(data[, -c(7,8,9,10)])
sink()
xtable()
?xtable
install.packages("xtable")
library(xtable)
?xtable()
xtable(data)
xtable(data$Income)
xtable(summary(data$Income))
names(summary(data$Income))
View(data)
data=data[,-1]
table(data$Gender)
prop.table(data$Gender)
class(data$Gendr)
class(data$Gender)
prop.table(as.numeric(data$Gender))
table(as.numeric(data$Gender))
table(data$Gender)[1]
table(data$Gender)[2]
table(data$Gender)[1]
class(table(data$Gender)[1])
as.numeric(table(data$Gender)[2])
as.numeric(table(data$Gender)[1])
length(data$Gender)
#Making Frequency Table For Gender
freq_gender=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_gender)=("Counts", "Proportion")
freq_gender$Counts=c(as.numeric(table(data$Gender)[1]),as.numeric(table(data$Gender)[2]))
freq_gender$Proportion=c(as.numeric(table(data$Gender)[1])/length(data$Gender),as.numeric(table(data$Gender)[2])/length(data$Gender))
#Making Frequency Table For Gender
freq_gender=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_gender)=("Counts","Proportion")
freq_gender$Counts=c(as.numeric(table(data$Gender)[1]),as.numeric(table(data$Gender)[2]))
freq_gender$Proportion=c(as.numeric(table(data$Gender)[1])/length(data$Gender),as.numeric(table(data$Gender)[2])/length(data$Gender))
#Making Frequency Table For Gender
freq_gender=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_gender)=c("Counts","Proportion")
freq_gender$Counts=c(as.numeric(table(data$Gender)[1]),as.numeric(table(data$Gender)[2]))
freq_gender$Proportion=c(as.numeric(table(data$Gender)[1])/length(data$Gender),as.numeric(table(data$Gender)[2])/length(data$Gender))
freq_gender
table(data$Gender)
#Making Frequency Table For Gender
freq_gender=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_gender)=c("Counts","Proportion")
rownames(freq_gender)=c("Male", "Female")
freq_gender$Counts=c(as.numeric(table(data$Gender)[1]),as.numeric(table(data$Gender)[2]))
freq_gender$Proportion=c(as.numeric(table(data$Gender)[1])/length(data$Gender),as.numeric(table(data$Gender)[2])/length(data$Gender))
freq_gender
table(data$Student)
freq_gender=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_gender)=c("Counts","Proportion")
rownames(freq_gender)=c("Male", "Female")
freq_gender$Counts=c(as.numeric(table(data$Gender)[1]),as.numeric(table(data$Gender)[2]))
freq_gender$Proportion=c(as.numeric(table(data$Gender)[1])/length(data$Gender),as.numeric(table(data$Gender)[2])/length(data$Gender))
freq_gender
requency Table For Student Variable
freq_student=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_student)=c("Counts","Proportion")
rownames(freq_student)=c("Not Student", "Student")
freq_student$Counts=c(as.numeric(table(data$Student)[1]),as.numeric(table(data$Student)[2]))
freq_student$Proportion=c(as.numeric(table(data$Student)[1])/length(data$Student),as.numeric(table(data$Student)[2])/length(data$Student))
freq_student
table(data$Married)
#Making Frequency Table For Married Variable
freq_married=data.frame(matrix(NA, nrow = 2, ncol = 2))
colnames(freq_married)=c("Counts","Proportion")
rownames(freq_married)=c("Not Married", "Married")
freq_married$Counts=c(as.numeric(table(data$Married)[1]),as.numeric(table(data$Married)[2]))
freq_married$Proportion=c(as.numeric(table(data$Married)[1])/length(data$Married),as.numeric(table(data$Married)[2])/length(data$Married))
freq_married
table(ethnicity)
table(data$Ethnicity)
#Making Frequency Table For Married Variable
freq_ethnicity=data.frame(matrix(NA, nrow = 2, ncol = 3))
colnames(freq_ethnicity)=c("Counts","Proportion")
rownames(freq_ethnicity)=c("African American", "Asian", "Caucasian")
freq_ethnicity$ethnicity=c(as.numeric(table(data$Ethnicity)[1]),as.numeric(table(data$Ethnicity)[2]), as.numeric(table(data$Ethnicity)[3]))
freq_ethnicity$Proportion=c(as.numeric(table(data$Ethnicity )[1])/length(data$Ethnicity),as.numeric(table(data$Ethnicity)[2])/length(data$Ethnicity),as.numeric(table(data$Ethnicity)[3])/length(data$Ethnicity) )
freq_ethnicity
#Making Frequency Table For Married Variable
freq_ethnicity=data.frame(matrix(NA, nrow = 3, ncol = 2))
colnames(freq_ethnicity)=c("Counts","Proportion")
rownames(freq_ethnicity)=c("African American", "Asian", "Caucasian")
freq_ethnicity$ethnicity=c(as.numeric(table(data$Ethnicity)[1]),as.numeric(table(data$Ethnicity)[2]), as.numeric(table(data$Ethnicity)[3]))
freq_ethnicity$Proportion=c(as.numeric(table(data$Ethnicity )[1])/length(data$Ethnicity),as.numeric(table(data$Ethnicity)[2])/length(data$Ethnicity),as.numeric(table(data$Ethnicity)[3])/length(data$Ethnicity))
freq_ethnicity
freq_ethnicity=data.frame(matrix(NA, nrow = 3, ncol = 2))
colnames(freq_ethnicity)=c("Counts","Proportion")
rownames(freq_ethnicity)=c("African American", "Asian", "Caucasian")
#Making Frequency Table For Married Variable
freq_ethnicity=data.frame(matrix(NA, nrow = 3, ncol = 2))
colnames(freq_ethnicity)=c("Counts","Proportion")
rownames(freq_ethnicity)=c("African American", "Asian", "Caucasian")
freq_ethnicity$Counts=c(as.numeric(table(data$Ethnicity)[1]),as.numeric(table(data$Ethnicity)[2]), as.numeric(table(data$Ethnicity)[3]))
freq_ethnicity$Proportion=c(as.numeric(table(data$Ethnicity )[1])/length(data$Ethnicity),as.numeric(table(data$Ethnicity)[2])/length(data$Ethnicity),as.numeric(table(data$Ethnicity)[3])/length(data$Ethnicity))
freq_ethnicity
table(data)
table(data$Ethnicity)
sink(file="../../data/qual-variables-tables.txt")
freq_married
freq_ethnicity
freq_student
freq_gender
sink()
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
sink(file="../../data/qual-variables-tables.txt")
freq_married
freq_ethnicity
freq_student
freq_gender
sink()
sink(file="../../data/qual-variables-tables.txt")
print("Frequency Table for Marriage Variable")
freq_married
print("Frequency Table for Ethnicity Variable")
freq_ethnicity
print("Frequency Table for Student Variable")
freq_student
print("Frequency Table for Gender Variable")
freq_gender
sink()
barplot(table(data$Income), main="Histogram of Gender", xlab="Gender")
barplot((data$Income), main="Histogram of Gender", xlab="Gender")
barplot(data$Gender, main="Histogram of Gender", xlab="Gender")
barplot(table(data$Gender), main="Histogram of Gender", xlab="Gender")
barplot(table(data$Married), main="Barchart of Married Variable", xlab="Marriage Status")
barplot(table(data$Student), main="Histogram of Student Variable", xlab="Student Status")
barplot(table(data$Ethnicity), main="Barchart of Ethnicity", xlab="Ethnicity")
#Gender Barchart
png(filename="../../images/barchart-Gender.png")
barplot(table(data$Gender), main="Barchart of Gender Variable", xlab="Gender")
dev.off()
#Married Barchart
png(filename="../../images/barchart-Married.png")
barplot(table(data$Married), main="Barchart of Married Variable", xlab="Marriage Status")
dev.off()
#Student Barchart
png(filename="../../images/barchart-Student.png")
barplot(table(data$Student), main="Barchart of Student Variable", xlab="Student Status")
dev.off()
#Ethnicity Barchart
png(filename="../images/barchart-Studenet.png")
barplot(table(data$Ethnicity), main="Barchart of Ethnicity", xlab="Ethnicity")
dev.off()
#Gender Barchart
png(filename="../../images/barchart-Gender.png")
barplot(table(data$Gender), main="Barchart of Gender Variable", xlab="Gender")
dev.off()
#Married Barchart
png(filename="../../images/barchart-Married.png")
barplot(table(data$Married), main="Barchart of Married Variable", xlab="Marriage Status")
dev.off()
#Student Barchart
png(filename="../../images/barchart-Student.png")
barplot(table(data$Student), main="Barchart of Student Variable", xlab="Student Status")
dev.off()
#Ethnicity Barchart
png(filename="../../images/barchart-Studenet.png")
barplot(table(data$Ethnicity), main="Barchart of Ethnicity", xlab="Ethnicity")
dev.off()
freq_ethnicity
xtable(freq_ethnicity)
save(freq_gender, freq_ethnicity, freq_married, freq_student, "../../data/freq_tables.R")
save(freq_gender, freq_ethnicity, freq_married, freq_student, file="../../data/freq_tables.RData")
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
save(freq_gender, freq_ethnicity, freq_married, freq_student, file="../../data/freq_tables.RData")
train_ind=sample(1:400, 300)
train_ind
set.seed(1231231)
test=processed[!train_ind,]
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
processed=read.csv("../../data/scaled-credit.csv")
set.seed(1231231)
train_ind=sample(1:400, 300)
train=data[train_ind,]
train_ind
!train_ind
train_ind
shuffled_ind=sample(1:400, 400)
unprocessed_data<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/Credit.csv")
##Turn categorical variables into dummy variables
processed<-model.matrix(~0+., unprocessed_data[,-9])
##normalize non-categorical explanotory variables
for (i in c(2:7,13)){
processed[,i]<-scale(processed[,i])
}
##write to data file
write.csv(processed,"../../data/scaled-credit.csv")
processed=read.csv("../../data/scaled-credit.csv")
set.seed(1231231)
shuffled_ind=sample(1:400, 400)
train=processed[shuffled_ind[1:300],]
test=processed[shuffled_ind[301:400],]
save(train, test, file="../../data/test_train.RData")
