sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
```{r cars, echo=FALSE}
load("/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
```
![Relationship Between TV Advertisements and Sales](/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png)
Summary Table for Relevant Regression Statistics
```{r pressure, echo=FALSE}
print(reg_summary)
simulate_one=function(initial_bet, multiplier){
outcomes = c(rep(-1, 55), rep(1, 45))
outcome = sample(outcomes, size = 1)
if(outcome==1){
gain=initial_bet*multiplier
return(gain)
}
loss=initial_bet*multiplier*-1
return(loss)
}
simulate_turns = function(initial_bet, strategy, numBets) {
outcomes = c(rep(-1, 55), rep(1, 45))
multiplier=1
result=vector()
for(i in 1:numBets) {
result[i]=simulate_one(initial_bet, multiplier)
if(result[i]<0){
multiplier=strategy*multiplier
}
else{
multiplier=1
}
}
return((result))
}
#Extracting maximum amount of money you have to be willing to bet
catastrophic_loss=function(initial_bet, strategy, numBets, times){
dist=vector()
for(i in 1:times){
dist[i]=max(simulate_turns(1,2,100))
}
plot(dist)
}
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(5, 2, 100, 100)
catastrophic_loss(1, 2, 10, 100)
catastrophic_loss(1, 2, 10, 100)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
library(stargazer)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/",args, sep="")
cat("3", "2")
cat("3", "2", sep="")
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data",lasjdfl;sj, sep=""))
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data","jlasdjf", sep=""))
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", c("Advertising.csv"), sep="")
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
z=cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
read.csv(z)
read.csv(c("z"))
read.csv("z")
read.csv(z)
read.csv(z)
z
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(file=cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(as.char(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/"), "Advertising.csv", sep=""))
read.csv(as.character(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/"), "Advertising.csv", sep=""))
read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
)
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
str(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
str(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[1]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[[1]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[[1]]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv"))
c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv")
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv")
pasate("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")[1]
read.csv(paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.txt("https://piazza-resources.s3.amazonaws.com/isai0nn0zvc12j/itgbmkupc8q2g4/bodyfat_corrected.txt?AWSAccessKeyId=AKIAIEDNRLJ4AZKBW6HA&Expires=1477039259&Signature=JcR8kTdOz3%2BlsIZY64cHlNQtmlM%3D")
bodyfat=read.table(url(https://piazza-resources.s3.amazonaws.com/isai0nn0zvc12j/itgbmkupc8q2g4/bodyfat_corrected.txt?AWSAccessKeyId=AKIAIEDNRLJ4AZKBW6HA&Expires=1477039259&Signature=JcR8kTdOz3%2BlsIZY64cHlNQtmlM%3D))
bodyfat=read.table(url("https://piazza-resources.s3.amazonaws.com/isai0nn0zvc12j/itgbmkupc8q2g4/bodyfat_corrected.txt?AWSAccessKeyId=AKIAIEDNRLJ4AZKBW6HA&Expires=1477039259&Signature=JcR8kTdOz3%2BlsIZY64cHlNQtmlM%3D"))
View(bodyfat)
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH)
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat)
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat)
bodyfat=read.table(url("https://piazza-resources.s3.amazonaws.com/isai0nn0zvc12j/itgbmkupc8q2g4/bodyfat_corrected.txt?AWSAccessKeyId=AKIAIEDNRLJ4AZKBW6HA&Expires=1477039259&Signature=JcR8kTdOz3%2BlsIZY64cHlNQtmlM%3D"), header=FALSE)
View(bodyfat)
bodyfat=read.table(url("https://piazza-resources.s3.amazonaws.com/isai0nn0zvc12j/itgbmkupc8q2g4/bodyfat_corrected.txt?AWSAccessKeyId=AKIAIEDNRLJ4AZKBW6HA&Expires=1477039259&Signature=JcR8kTdOz3%2BlsIZY64cHlNQtmlM%3D"), header=TRUE)
View(bodyfat)
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat)
plot(model)
plot(model, which=2)
plot(model, which=3)
plot(model, which=4)
plot(model, which=5)
plot(model, which=1)
plot(model, which=3)
plot(model, which=2)
plot(model, which=4)
plot(model, which=5)
plot(model)
summary(model)
names(summary(model))
names(model)
rstandard
?rstandard
install.packages("MASS")
library(MASS)
standard_res=stdres(model)
standard_res
names(model)
plot(model$residuals, standard_res)
plot(model, which=4)
plot(model, which=1)
plot(model, which=2)
plot(model, which=3)
plot(model, which=4)
plot(model, which=5)
plot(model, which=4)
plot(model, which=3)
standard_res=stdres(model)
plot(model$residuals, standard_res)
plot(model$residuals, standard_res)
plot(model, which=3)
plot(model, which=1)
plot(model, which=4)
plot(model, which=5)
plot(model, which=5)
head(bodyfat)
head(bodyfat[-2,])
head(bodyfat[-1,])
head(bodyfat[-2,])
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat[-2,])
pred(model,bodyfat[2,])
predict(model,bodyfat[2,])
bodyfat[2,"BODYFAT"]-pred
pred=predict(model,bodyfat[2,])
bodyfat[2,"BODYFAT"]-pred
summary(model)
names(model)
pred_resid=vector()
for(i in 1:nrow(bodyfat)){
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat[-i,])
pred=predict(model,bodyfat[2,])
pred_resid[i]=bodyfat[i,"BODYFAT"]-pred
}
plot(pred_resid,model$fitted.values)
model=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat)
length(model$fitted.values)
length(pred_resid)
pred_resid=vector()
for(i in 1:nrow(bodyfat)){
model_dummy=lm(BODYFAT~AGE+WEIGHT+HEIGHT+THIGH, data=bodyfat[-i,])
pred=predict(model,bodyfat[2,])
pred_resid[i]=bodyfat[i,"BODYFAT"]-pred
}
plot(pred_resid,model$fitted.values)
plot(model$fitted.values, pred_resid)
plot(model$fitted.values, pred_resid, ylab="Predicted Residuals", xlab="Fitted Values")
plot(model$residuals, pred_resid, ylab="Residuals", xlab="Predicted Residiuals")
?studres
plot(pred_resid, studres(model), ylab="Predicted Residuals", xlab="Standardized Predicted Residuals")
?plot()
{r H}
plot(stdres(model), studres(model), xlab="Standardized Residuals", ylab="Standardized Predicted Residuals")
plot(model, which=3)
plot(model$residuals, standard_res)
plot(pred_resid, studres(model), ylab="Predicted Residuals", xlab="Standardized Predicted Residuals")
plot(studres(model), stdres(model), ylab="Standardized Residuals", xlab="Standardized Predicted Residuals")
plot(model, which=5)
plot(pred_resid, model$residuals,ylab="Residuals", xlab="Predicted Residiuals")
plot(model, which=3)
plot(model, which=1)
plot(stdres(model))
model
summary(model)
abs_jacknife=abs(stdres(model))
p_vals=pt(abs_jacknife, 247, lower.tail=FALSE)
p_vals
which(p_vals<.05)
p_vals
p_vals=pt(abs_jacknife, 247, lower=FALSE)
which(p_vals<.05)
p_vals
class(p_vals)
plot(p_vals)
.05/252
which(p_vals<.05/nrow(bodyfat))
?cv.glmnet
library(glmnet)
?cv.glmnet
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], grid=10^seq(10,-2, length=100), intercept=FALSE, standardized=FALSE)
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
load(file="../../data/test_train.RData")
library(glmnet)
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], grid=10^seq(10,-2, length=100), intercept=FALSE, standardized=FALSE)
avg_error=vector()
grid=10^seq(10,-2, length=100)
grid
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE, standardized=FALSE)
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE)
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE, standardize=FALSE)
ridge_obj
plot(ridge_obj)
#Ridge Plot
png(filename="../../images/plot-Ridge.png")
plot(ridge_obj)
dev.off()
ridge_obj$beta
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE, standardize=FALSE)
names(ridge_obj)
ridge_obj$lambda
?glmnet()
opt_ridge=glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=ridge_obj$lambda.1se)
opt_ridge
opt_lambda
ridg_obj$lambda.1se
ridge_obj$lambda.1se
names(opt_ridge)
opt_ridge$beta
opt_ridge=glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
y_hat=as.matrix(cbind(test[-c(1,2,14)])) %*% opt_ridge$beta
mse_ridge=mean(y_hat - test[,14])
mse_ridge
mse_ridge=mean(y_hat - test[,14])
full_ridge=glmnet(as.matrix(rbind(train[,-c(1,2,14)], test[,-c(1,2,14)])), rbind(train[,14], test[,14]), lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
as.matrix(rbind(train[,-c(1,2,14)], test[,-c(1,2,14)])
)
dim(as.matrix(rbind(train[,-c(1,2,14)], test[,-c(1,2,14)])))
dim(rbind(train[,14], test[,14]))
set.seed(0)
load(file="../../data/test_train.RData")
library(glmnet)
grid=10^seq(10,-2, length=100)
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE, standardize=FALSE)
save(file="../../data/ridge_fit.RData")
#Ridge Plot
png(filename="../../images/plot-Ridge.png")
plot(ridge_obj)
dev.off()
#Computing MSE of Ridge with optimal lambda
opt_ridge=glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
y_hat=as.matrix(cbind(test[-c(1,2,14)])) %*% opt_ridge$beta
mse_ridge=mean(y_hat - test[,14])
mse_ridge
set.seed(0)
load(file="../../data/test_train.RData")
library(glmnet)
grid=10^seq(10,-2, length=100)
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE, standardize=FALSE)
save(file="../../data/ridge_fit.RData")
#Ridge Plot
png(filename="../../images/plot-Ridge.png")
plot(ridge_obj)
dev.off()
#Computing MSE of Ridge with optimal lambda
opt_ridge=glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
y_hat=as.matrix(cbind(test[-c(1,2,14)])) %*% opt_ridge$beta
mse_ridge=mean(y_hat - test[,14])
mse_ridge
set.seed(0)
load(file="../../data/test_train.RData")
library(glmnet)
grid=10^seq(10,-2, length=100)
ridge_obj=cv.glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=grid, intercept=FALSE, standardize=FALSE)
save(file="../../data/ridge_fit.RData")
#Ridge Plot
png(filename="../../images/plot-Ridge.png")
plot(ridge_obj)
dev.off()
#Computing MSE of Ridge with optimal lambda
opt_ridge=glmnet(as.matrix(train[,-c(1,2,14)]), train[,14], lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
y_hat=as.matrix(cbind(test[-c(1,2,14)])) %*% opt_ridge$beta
mse_ridge=mean(y_hat - test[,14])
mse_ridge
dim(as.matrix(rbind(train[,-c(1,2,14)], test[,-c(1,2,14)])))
rbind(train[,14], test[,14])
train[,14]
test[,14]
dim(test[,14])
c(train[,14], test[,14])
c(train[,14], test[,14])[1:300]==train[,14]
full_ridge=glmnet(as.matrix(rbind(train[,-c(1,2,14)], test[,-c(1,2,14)])), c(train[,14], test[,14]), lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
full_ridge$beta
summary(ridge_obj)
y_hat2=predict(opt_ridge, newx = test[,-c(1,2,14)])
y_hat2=predict(opt_ridge, newx = as.matrix(test[,-c(1,2,14)]))
y_hat1==y_hat2
mean(y_hat1-y_hat2)
mean(y_hat-y_hat2)
y_hat==y_hat2
y_hat=as.matrix(cbind(test[,-c(1,2,14)])) %*% opt_ridge$beta
y_hat==y_hat2
y_hat=as.matrix(test[,-c(1,2,14)]) %*% opt_ridge$beta
y_hat==y_hat2
plsr_obj=plsr(Balance~.,data=train[,-c(1,2)], validation="CV")
library(pls)
load(file="../../data/test_train.RData")
plsr_obj=plsr(Balance~.,data=train[,-c(1,2)], validation="CV")
plsr_obj
View(data)
View(train)
opt_model=plsr_obj$validation$PRESS
opt_model
validationplot(plsr_obj,val.type="MSEP")
validationplot(opt_model,val.type="MSEP")
validationplot(plsr_obj,val.type="MSEP")
plsr_obj$validation$PRESS
min(plsr_obj$validation$PRESS)
full_plsr=plsr(Balance~., data=rbind(train[,-c(1,2)], test[,-c(1,2)]))
names(full_plsr)
which(plsr_obj$validation$PRESS==min(plsr_obj$validation$PRESS))
min(plsr_obj$validation$PRESS)
plsr_obj$validation$PRESS
save(plsr_obj, mse_plsr, full_plsr$coefficients, filename="../../data/plsr.RData")
sink(file="../../data/ridge.txt")
print("Optimal # of Components for Plsr")
plsr_obj$validation$PRESS
print("MSE of Plsr with Optimal # of Components")
mse_plsr
print("Beta Coefficients")
full_plsr$coefficients
sink()
mse_plsr=mean(y_hat-test[,14])
#Saving all relevant plsr objects
save(plsr_obj, mse_plsr, full_plsr$coefficients, filename="../../data/plsr.RData")
sink(file="../../data/ridge.txt")
print("Optimal # of Components for Plsr")
plsr_obj$validation$PRESS
print("MSE of Plsr with Optimal # of Components")
mse_plsr
print("Beta Coefficients")
full_plsr$coefficients
sink()
processed=read.csv("../../data/scaled-credit.csv")
View(processed)
library(pls)
load(file="../../data/test_train.RData")
plsr_obj=plsr(Balance~.,data=train[,-c(1,2)], validation="CV")
min(plsr_obj$validation$PRESS)
#Partial Least Squares Regression Plot
png(filename="../../images/plot-plsr.png")
plot(plsr_obj)
dev.off()
#Computing MSE of PLSR with optimal Components
y_hat=predict(plsr_obj, ncomp=5, newdata=test[,-c(1,2,14)])
mse_plsr=mean(y_hat-test[,14])
#Finding beta coefficients by fitting model on full dataset
full_plsr=plsr(Balance~., data=rbind(train[,-c(1,2)], test[,-c(1,2)]))
#Saving all relevant plsr objects
save(plsr_obj, mse_plsr, full_plsr$coefficients, filename="../../data/plsr.RData")
sink(file="../../data/plsr.txt")
print("Optimal # of Components for Plsr")
plsr_obj$validation$PRESS
print("MSE of Plsr with Optimal # of Components")
mse_plsr
print("Beta Coefficients")
full_plsr$coefficients
sink()
#Partial Least Squares Regression Plot
png(filename="../../images/plot-plsr.png")
plot(plsr_obj)
dev.off()
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
library(pls)
load(file="../../data/test_train.RData")
plsr_obj=plsr(Balance~.,data=train[,-c(1,2)], validation="CV")
min(plsr_obj$validation$PRESS)
#Partial Least Squares Regression Plot
png(filename="../../images/plot-plsr.png")
plot(plsr_obj)
dev.off()
#Computing MSE of PLSR with optimal Components
y_hat=predict(plsr_obj, ncomp=5, newdata=test[,-c(1,2,14)])
mse_plsr=mean(y_hat-test[,14])
#Finding beta coefficients by fitting model on full dataset
full_plsr=plsr(Balance~., data=rbind(train[,-c(1,2)], test[,-c(1,2)]))
#Saving all relevant plsr objects
save(plsr_obj, mse_plsr, full_plsr$coefficients, filename="../../data/plsr.RData")
sink(file="../../data/plsr.txt")
print("Optimal # of Components for Plsr")
plsr_obj$validation$PRESS
print("MSE of Plsr with Optimal # of Components")
mse_plsr
print("Beta Coefficients")
full_plsr$coefficients
sink()
