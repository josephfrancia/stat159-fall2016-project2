full_ridge=glmnet(as.matrix(rbind(train[,-12], test[,-12])), c(train[,12], test[,12]), lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
betas_ridge=full_ridge$beta
lambda_ridge=ridge_obj$lambda.1se
#Saving all relevant ridge objects
save(ridge_obj, mse_ridge, betas_ridge, lambda_ridge, file="../../data/ridge.RData")
sink(file="../../data/ridge.txt")
print("Optimal Lambda for Ridge")
ridge_obj$lambda.1se
print("MSE of Ridge with Optimal Lambda")
mse_ridge
print("Beta Coefficients")
full_ridge$beta
sink()
load(file="../../data/test_train.RData")
load(file="../../data/ridge.RData")
load(file="../../data/plsr.RData")
load(file="../../data/lm.RData")
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="../../data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=as.numeric(betas_ridge)
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender.Male", "GenderFemale", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression")
save(betas,file="../../data/coef_table.RData")
View(betas)
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
#Finding various lambda values and their associated MSE
set.seed(0)
load(file="../../data/test_train.RData")
library(glmnet)
grid=10^seq(10,-2, length=100)
ridge_obj=cv.glmnet(as.matrix(train[,-12]), train[,12], alpha=0, lambda=grid, intercept=FALSE, standardize=FALSE)
#Ridge Plot
png(filename="../../images/plot-ridge.png")
plot(ridge_obj)
dev.off()
#Computing MSE of Ridge with optimal lambda
opt_ridge=glmnet(as.matrix(train[,-12]), train[,12], alpha=0,lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
y_hat_ridge=predict(opt_ridge, newx=as.matrix(test[,-12]))
mse_ridge=mean((y_hat_ridge - test[,12])^2)
#Finding beta coefficients by fitting model on full dataset
full_ridge=glmnet(as.matrix(rbind(train[,-12], test[,-12])), alpha=0, c(train[,12], test[,12]), lambda=ridge_obj$lambda.1se, intercept=FALSE, standardize=FALSE)
betas_ridge=full_ridge$beta
lambda_ridge=ridge_obj$lambda.1se
#Saving all relevant ridge objects
save(ridge_obj, mse_ridge, betas_ridge, lambda_ridge, file="../../data/ridge.RData")
sink(file="../../data/ridge.txt")
print("Optimal Lambda for Ridge")
ridge_obj$lambda.1se
print("MSE of Ridge with Optimal Lambda")
mse_ridge
print("Beta Coefficients")
full_ridge$beta
sink()
load(file="../../data/test_train.RData")
load(file="../../data/ridge.RData")
load(file="../../data/plsr.RData")
load(file="../../data/lm.RData")
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="../../data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=as.numeric(betas_ridge)
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender.Male", "GenderFemale", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression")
save(betas,file="../../data/coef_table.RData")
View(beta)
View(betas)
mse_lm
load(file="../../data/test_train.RData")
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-12])
plot(y_hat-test[,12])
mse_lm=mean((y_hat-test[,12])^2)
save(lm_obj,file="../../data/lm.RData")
mse_lm
library(xtable)
load("../../data/mse_table.RData")
load("../../data/coef_table.RData")
load(file="../../data/ridge.RData")
load(file="../../data/plsr.RData")
load(file="../../data/lm.RData")
plsr_obj
coefplot(plsr_obj, predictors="color")
d <- ggplot(diamonds, aes(carat, price, fill = ..density..)) +
xlim(0, 2) + stat_binhex(na.rm = TRUE) + theme(aspect.ratio = 1)
d
diamonds
head(diamonds)
d+facet_wrap(color)
d+facet_wrap(~color)
betas
View(betas)
View(betas)
raw <- read.csv("http://pastebin.com/raw.php?i=L8cEKcxS",sep=",")
raw[,2]<-factor(raw[,2],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,3]<-factor(raw[,3],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,4]<-factor(raw[,4],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
View(raw)
raw
View(raw())
raw
betas
library(xtable)
load("../../data/mse_table.RData")
load("../../data/coef_table.RData")
load(file="../../data/ridge.RData")
load(file="../../data/plsr.RData")
load(file="../../data/lm.RData")
```
#Analysis
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now that we have a better understanding of each of these regression methods, lets look at the data in order to see how each regression performed:
<table border = 1>
<tr>
<td>
```{r results='asis', echo=FALSE}
library(xtable)
print(xtable(mse), comment=F)
```
</td>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lets take a look at how the estimated regression coefficients differ for each regression:
<table border = 1>
<tr>
<td>
```{r results='asis', echo=FALSE}
print(xtable(betas), comment=F, scalebox='.75')
```
</td>
View(betas)
names=c("PLS", "Least Squares", "Ridge")
{r, echo=FALSE}
betas.m <- melt(betas)
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
betas.m <- melt(betas)
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable))
betas.m <- melt(betas)
library(ggplot2)
{r, echo=FALSE}
betas.m <- melt(betas)
ggplot(betas.m, aes(Names, value)) +
geom_bar(aes(fill = variable))
{r, echo=FALSE}
betas.m <- melt(betas)
ggplot(betas.m, aes(Names, value)) +
geom_bar(aes(fill = variable))
income_range, income_sd,))
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,
income_range, income_sd,))
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr))
income_range, income_sd,))
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd,))
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd,))
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
#quant-variables-statistics.txt
library(xtable)
sink(file="../data/quant-variables-statistics.txt")
summary(data$Income)
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd,))
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd))
colnames(income)=c("Statistics")
View(income)
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics")
View(income)
summary(data$Income)
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Income Variable")
View(income)
colnames(data)
sink(file="../data/quant-variables-statistics.txt")
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Income Variable")
print(xtable(income), comment=F)
rating_min=min(data$Rating)
rating_max=max(data$Rating)
rating_median=median(data$Rating)
rating_mean=mean(data$Rating)
rating_1q=summary(data$Rating)[2]
rating_3q=summary(data$Rating)[5]
rating_iqr=as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
rating_range=as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
rating_sd=sd(data$Rating) #Standard Deviation
rating=data.frame(c(rating_min, rating_max, rating_median, rating_mean, rating_1q, rating_3q, rating_iqr,rating_range, rating_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Rating Variable")
print(xtable(rating), comment=F)
sink()
#quant-variables-statistics.txt
library(xtable)
sink(file="../../data/quant-variables-statistics.txt")
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Income Variable")
print(xtable(income), comment=F)
rating_min=min(data$Rating)
rating_max=max(data$Rating)
rating_median=median(data$Rating)
rating_mean=mean(data$Rating)
rating_1q=summary(data$Rating)[2]
rating_3q=summary(data$Rating)[5]
rating_iqr=as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
rating_range=as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
rating_sd=sd(data$Rating) #Standard Deviation
rating=data.frame(c(rating_min, rating_max, rating_median, rating_mean, rating_1q, rating_3q, rating_iqr,rating_range, rating_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Rating Variable")
print(xtable(rating), comment=F)
sink()
print(xtable(rating), comment=F)
print(income)
sink(file="../../data/quant-variables-statistics.txt")
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Income Variable")
print(income)
rating_min=min(data$Rating)
rating_max=max(data$Rating)
rating_median=median(data$Rating)
rating_mean=mean(data$Rating)
rating_1q=summary(data$Rating)[2]
rating_3q=summary(data$Rating)[5]
rating_iqr=as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
rating_range=as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
rating_sd=sd(data$Rating) #Standard Deviation
rating=data.frame(c(rating_min, rating_max, rating_median, rating_mean, rating_1q, rating_3q, rating_iqr,rating_range, rating_sd))
rownames(rating)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(rating)=c("Statistics for Rating Variable")
print(rating)
sink()
cards_min=min(data$Cards)
cards_max=max(data$Cards)
cards_median=median(data$Cards)
cards_mean=mean(data$Cards)
cards_1q=summary(data$Cards)[2]
cards_3q=summary(data$Cards)[5]
cards_iqr=as.numeric((summary(data$Cards))[5]-(summary(data$Cards))[2]) #IQR
cards_range=as.numeric(summary(data$Cards)[6]-summary(data$Cards)[1]) #Range
cards_sd=sd(data$Cards) #Standard Deviation
cards=data.frame(c(cards_min, cards_max, cards_median, cards_mean, cards_1q, cards_3q, cards_iqr,cards_range, cards_sd))
rownames(cards)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(cards)=c("Statistics for Cards Variable")
print(cards)
age_min=min(data$Age)
age_max=max(data$Age)
age_median=median(data$Age)
age_mean=mean(data$Age)
age_1q=summary(data$Age)[2]
age_3q=summary(data$Age)[5]
age_iqr=as.numeric((summary(data$Age))[5]-(summary(data$Age))[2]) #IQR
age_range=as.numeric(summary(data$Age)[6]-summary(data$Age)[1]) #Range
age_sd=sd(data$Age) #Standard Deviation
age=data.frame(c(age_min, age_max, age_median, age_mean, age_1q, age_3q, age_iqr,age_range, age_sd))
rownames(age)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(age)=c("Statistics for Age Variable")
print(age)
education_min=min(data$Education)
education_max=max(data$Education)
education_median=median(data$Education)
education_mean=mean(data$Education)
education_1q=summary(data$Education)[2]
education_3q=summary(data$Education)[5]
education_iqr=as.numeric((summary(data$Education))[5]-(summary(data$Education))[2]) #IQR
education_range=as.numeric(summary(data$Education)[6]-summary(data$Education)[1]) #Range
education_sd=sd(data$Education) #Standard Deviation
education=data.frame(c(education_min, education_max, education_median, education_mean, education_1q, education_3q, education_iqr,education_range, education_sd))
rownames(education)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(education)=c("Statistics for Education Variable")
print(education)
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
#data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
args=commandArgs(trailingOnly=TRUE)
data=read.csv(paste("../../data/",args[1], sep=""))
data=data[,-1]
#quant-variables-statistics.txt
library(xtable)
sink(file="../../data/quant-variables-statistics.txt")
income_min=min(data$Income)
income_max=max(data$Income)
income_median=median(data$Income)
income_mean=mean(data$Income)
income_1q=summary(data$Income)[2]
income_3q=summary(data$Income)[5]
income_iqr=as.numeric((summary(data$Income))[5]-(summary(data$Income))[2]) #IQR
income_range=as.numeric(summary(data$Income)[6]-summary(data$Income)[1]) #Range
income_sd=sd(data$Income) #Standard Deviation
income=data.frame(c(income_min, income_max, income_median, income_mean, income_1q, income_3q, income_iqr,income_range, income_sd))
rownames(income)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(income)=c("Statistics for Income Variable")
print(income)
rating_min=min(data$Rating)
rating_max=max(data$Rating)
rating_median=median(data$Rating)
rating_mean=mean(data$Rating)
rating_1q=summary(data$Rating)[2]
rating_3q=summary(data$Rating)[5]
rating_iqr=as.numeric((summary(data$Rating))[5]-(summary(data$Rating))[2]) #IQR
rating_range=as.numeric(summary(data$Rating)[6]-summary(data$Rating)[1]) #Range
rating_sd=sd(data$Rating) #Standard Deviation
rating=data.frame(c(rating_min, rating_max, rating_median, rating_mean, rating_1q, rating_3q, rating_iqr,rating_range, rating_sd))
rownames(rating)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(rating)=c("Statistics for Rating Variable")
print(rating)
cards_min=min(data$Cards)
cards_max=max(data$Cards)
cards_median=median(data$Cards)
cards_mean=mean(data$Cards)
cards_1q=summary(data$Cards)[2]
cards_3q=summary(data$Cards)[5]
cards_iqr=as.numeric((summary(data$Cards))[5]-(summary(data$Cards))[2]) #IQR
cards_range=as.numeric(summary(data$Cards)[6]-summary(data$Cards)[1]) #Range
cards_sd=sd(data$Cards) #Standard Deviation
cards=data.frame(c(cards_min, cards_max, cards_median, cards_mean, cards_1q, cards_3q, cards_iqr,cards_range, cards_sd))
rownames(cards)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(cards)=c("Statistics for Cards Variable")
print(cards)
age_min=min(data$Age)
age_max=max(data$Age)
age_median=median(data$Age)
age_mean=mean(data$Age)
age_1q=summary(data$Age)[2]
age_3q=summary(data$Age)[5]
age_iqr=as.numeric((summary(data$Age))[5]-(summary(data$Age))[2]) #IQR
age_range=as.numeric(summary(data$Age)[6]-summary(data$Age)[1]) #Range
age_sd=sd(data$Age) #Standard Deviation
age=data.frame(c(age_min, age_max, age_median, age_mean, age_1q, age_3q, age_iqr,age_range, age_sd))
rownames(age)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(age)=c("Statistics for Age Variable")
print(age)
education_min=min(data$Education)
education_max=max(data$Education)
education_median=median(data$Education)
education_mean=mean(data$Education)
education_1q=summary(data$Education)[2]
education_3q=summary(data$Education)[5]
education_iqr=as.numeric((summary(data$Education))[5]-(summary(data$Education))[2]) #IQR
education_range=as.numeric(summary(data$Education)[6]-summary(data$Education)[1]) #Range
education_sd=sd(data$Education) #Standard Deviation
education=data.frame(c(education_min, education_max, education_median, education_mean, education_1q, education_3q, education_iqr,education_range, education_sd))
rownames(education)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(education)=c("Statistics for Education Variable")
print(education)
balance_min=min(data$Balance)
balance_max=max(data$Balance)
balance_median=median(data$Balance)
balance_mean=mean(data$Balance)
balance_1q=summary(data$Balance)[2]
balance_3q=summary(data$Balance)[5]
balance_iqr=as.numeric((summary(data$Balance))[5]-(summary(data$Balance))[2]) #IQR
balance_range=as.numeric(summary(data$Balance)[6]-summary(data$Balance)[1]) #Range
balance_sd=sd(data$Balance) #Standard Deviation
balance=data.frame(c(balance_min, balance_max, balance_median, balance_mean, balance_1q, balance_3q, balance_iqr,balance_range, balance_sd))
rownames(balance)=c("Min", "Max", "Median", "Mean", "First Quartile", "3rd Quartile", "IQR", "Range", "Standard Deviation")
colnames(balance)=c("Statistics for Balance Variable")
print(balance)
print("Matrix of Correlations")
cor(data[, -c(7,8,9,10)])
sink()
#Income Histogram
png(filename="../images/histogram-Income.png")
hist(data$Income, main="Histogram of Income", xlab="Income")
dev.off()
#Limit Histogram
png(filename="../images/histogram-Limit.png")
hist(data$Limit, main="Histogram of Limit", xlab="Limit")
dev.off()
#Rating Histogram
png(filename="../images/histogram-Rating.png")
hist(data$Rating, main="Histogram of Rating", xlab="Rating")
dev.off()
#Cards Histogram
png(filename="../images/histogram-Cards.png")
hist(data$Cards, main="Histogram of Credit Cards", xlab="Number of Credit Cards")
dev.off()
#Age Histogram
png(filename="../images/histogram-Age.png")
hist(data$Age, main="Histogram of Age", xlab="Age")
dev.off()
#Education Histogram
png(filename="../images/histogram-Education.png")
hist(data$Education, main="Histogram of Years of Education", xlab="Years of Education")
dev.off()
#Balance Histogram
png(filename="../images/histogram-Balance.png")
hist(data$Balance, main="Histogram of Balance", xlab="Balance")
dev.off()
#Income Boxplot
png(filename="../images/boxplot-Income.png")
boxplot(data$Income, main="Boxplot of Income", ylab="Income")
dev.off()
#Limit Boxplot
png(filename="../images/boxplot-Limit.png")
boxplot(data$Limit, main="Boxplot of Limit", ylab="Limit")
dev.off()
#Rating Boxplot
png(filename="../images/boxplot-Rating.png")
boxplot(data$Rating, main="Boxplot of Rating", ylab="Rating")
dev.off()
#Cards Boxplot
png(filename="../images/boxplot-Cards.png")
boxplot(data$Cards, main="Boxplot of Credit Cards", ylab="Number of Credit Cards")
dev.off()
#Age Boxplot
png(filename="../images/boxplot-Age.png")
boxplot(data$Age, main="Boxplot of Age", xlab="Age")
dev.off()
#Education Boxplot
png(filename="../images/boxplot-Education.png")
boxplot(data$Education, main="Boxplot of Years of Education", ylab="Years of Education")
dev.off()
#Balance Boxplot
png(filename="../images/boxplot-Balance.png")
boxplot(data$Balance, main="Boxplot of Balance", ylab="Balance")
dev.off()
library(xtable)
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
#data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
load("../../data/Credit.csv")
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/code/scripts")
load("../../data/Credit.csv")
data=read.csv("../../data/Credit.csv")
cor(data[, -c(7,8,9,10)])
data
View(data)
data=data[,-1]
cor(data[, -c(7,8,9,10)])
class(cor(data[, -c(7,8,9,10)]))
as.data.frame(cor(data[, -c(7,8,9,10)]))
load("../../data/freq_tables.RData")
#Ethnicity Barchart
png(filename="../../images/barchart-Ethnicity.png")
barplot(table(data$Ethnicity), main="
#Ethnicity Barchart
png(filename="../../images/barchart-Ethnicity.png")
barplot(table(data$Ethnicity), main="Barchart of Ethnicity", xlab="Ethnicity")
dev.off()
#Ethnicity Barchart
png(filename="../../images/barchart-Ethnicity.png")
barplot(table(data$Ethnicity), main="Barchart of Ethnicity", xlab="Ethnicity")
dev.off()
