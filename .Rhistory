mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
betas_plsr
betas_lasso
lasso_model
lasso_model$coefficients
lasso_model$betas
lasso_model$beta
length(betas_plsr)
length(betas_ls)
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
betas_plsr
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender.Male", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
length(beta_names)
View(betas)
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
View(beta)
View(betas)
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
View(betas)
?grid.table
grid.table(betas)
png(filename = "images/beta.png", width=4,height=4)
grid.table(betas)
dev.off()
png(filename = "images/beta.png", width=40,height=40)
grid.table(betas)
dev.off()
png(filename = "images/beta.png", width=11,height=8.5)
grid.table(betas)
dev.off()
png(filename = "/images/beta.png", width=11,height=8.5)
grid.table(betas)
dev.off()
png(filename = "images/beta.png", width=11,height=8.5)
grid.table(betas)
dev.off()
grid.table(betas,gp=gpar(fontsize=8))
grid.table(betas,gpar(fontsize=8))
print.data.frame(betas)
install.packages("gridExtra")
install.packages("gridExtra")
library(gridExtra)
grid.table(betas,gpar(fontsize=8))
grid.table(betas)
?grid.table
grid.table(betas, padding=c(1,2))
library(gridExtra)
png(filename = "images/beta.png")
grid.table(betas)
dev.off()
library(gridExtra)
png(filename = "images/beta.png")
grid.table(betas)
dev.off()
p<-tableGrob(betas)
grid.arrange(p)
png("images/beta.png", height=1000, width=200)
p<-tableGrob(betas)
grid.arrange(p)
dev.off()
png("images/beta.png", height=100*nrow(betas), width=ncol(betas))
p<-tableGrob(betas)
grid.arrange(p)
dev.off()
p<-tableGrob(betas)
grid.arrange(p)
png("images/beta.png")
p<-tableGrob(betas)
grid.arrange(p)
dev.off()
grid.arrange(p)
grid.table(p)
tableGrob(betas)
grid.table(betas)
betas
plot(grid.table(betas))
grid.table(betas)
grid.table(betas,padding.h=unit(2, "mm"), padding.v=unit(2, "mm"))
grid.table(betas)
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
grid.table(betas)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")[,-c(1,2)]
train<-trainset(data)
test<-testset(data)
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-12])
plot(y_hat-test[,12])
mse_lm=mean((y_hat-test[,12])^2)
save(lm_obj,mse_lm,file="data/lm.RData")
mse_lm
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
pcr_lowest_comp<-which.min(train_model$validation$PRESS)
png(filename="images/validationplot-PCR.jpg")
validationplot(train_model,val.type="MSEP")
dev.off
full_train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
predictions<-predict(full_train_model,ncomps=pcr_lowest_comp,newdata=as.data.frame(test[,-12]))
library("pls")
train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
pcr_lowest_comp<-which.min(train_model$validation$PRESS)
png(filename="images/validationplot-PCR.jpg")
validationplot(train_model,val.type="MSEP")
dev.off
full_train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
predictions<-predict(full_train_model,ncomps=pcr_lowest_comp,newdata=as.data.frame(test[,-12]))
mse_pcr<-mean((predictions-test[,"Balance"])^2)
pcr_model<-pcr(Balance~.,data=as.data.frame(data), ncomps=pcr_lowest_comp)
pcr_coefficients<-pcr_model$coefficients
png(filename="images/plot-plsr.png")
plot(plsr_obj)
dev.off()
png(filename="images/plot-plsr.png")
plot(plsr_obj)
dev.off()
png(filename="images/plot-plsr.png")
plot(plsr_obj)
dev.off()
png(filename="images/plot-plsr.png")
plot(plsr_obj)
dev.off()
plot(y_hat-test[,12])
View(train)
ncol(train)
View(train)
train
View(train)
View(test)
class(train)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")[,-1]
(trailingOnly=TRUE)
unprocessed_data=read.csv(args[1])[,-1]
##Turn categorical variables into dummy variables
processed=model.matrix(~., unprocessed_data)
##normalize non-categorical explanotory variables
for (i in c(1:6,13)){
processed[,i]<-scale(processed[,i])
}
##write to data file
write.csv(processed,"data/scaled-credit.csv")
unprocessed_data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")[,-1]
unprocessed_data=read.csv(args[1])[,-1]
##Turn categorical variables into dummy variables
processed=model.matrix(~., unprocessed_data)
##normalize non-categorical explanotory variables
for (i in c(1:6,13)){
processed[,i]<-scale(processed[,i])
}
View(processed)
View(unprocessed)
View(unprocessed_data)
?model.matrix()
summary(lm_obj)
processed=model.matrix(Balance~., unprocessed_data)
for (i in c(1:6,13)){
processed[,i]<-scale(processed[,i])
}
##write to data file
write.csv(processed,"data/scaled-credit.csv")
View(processed)
##Turn categorical variables into dummy variables
processed=model.matrix(~., unprocessed_data)
##normalize non-categorical explanotory variables
for (i in c(1:6,13)){
processed[,i]<-scale(processed[,i])
}
##write to data file
write.csv(processed,"data/scaled-credit.csv")
View(processed)
View(processed)
processed=model.matrix(~., unprocessed_data)
View(processed)
unprocessed_data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")[,-1]
args=commandArgs(trailingOnly=TRUE)
unprocessed_data=read.csv(args[1])[,-1]
##Turn categorical variables into dummy variables
processed=model.matrix(~., unprocessed_data)
View(processed)
lm(Balance~., processed)
processed
processed=model.matrix(~0+., unprocessed_data)
View(processed)
processed=model.matrix(~., unprocessed_data)
View(processed)
ncol(processed)
for (i in c(1:7,13)){
processed[,i]<-scale(processed[,i])
}
##write to data file
write.csv(processed,"data/scaled-credit.csv")
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
mse_lm=mean((y_hat-test[,13])^2)
ncol(data)
View(data)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")
View(data)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")[,-2]
set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
ncol(data)
ncol(train)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
mse_lm=mean((y_hat-test[,13])^2)
mse_lm
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")[,-2]
View(data)
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
ncol(train)
plsr_obj=plsr(Balance~.,data=train, validation="CV")
min(plsr_obj$validation$PRESS)
#Partial Least Squares Regression Plot
png(filename="images/plot-plsr.png")
plot(plsr_obj)
dev.off()
#Computing MSE of PLSR with optimal Components
y_hat=predict(plsr_obj, ncomp=5, newdata=test[,-13])
mse_plsr=mean((y_hat-test[,13])^2)
#Finding beta coefficients by fitting model on full dataset
full_plsr=plsr(Balance~., data=rbind(train, test), ncomp=5)
betas_plsr=full_plsr$coefficients
#Saving all relevant plsr objects
save(plsr_obj, mse_plsr, betas_plsr, full_plsr, file="data/plsr.RData")
mse_plsr
unprocessed_data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")[,-1]
View(unprocessed_data)
processed=model.matrix(~., unprocessed_data)
View(processed)
View(processed)
ncol(processed)
betas
View(betas)
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
length(beta_names)
lasso_model$beta
View(betas)
Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
betas=data.frame(betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
length(betas_pcr)
length(betas_lasso)
length(betas_ls)
length(betas_plsr)
betas_plsr=betas_plsr[,5]
betas=data.frame(betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
length(betas_lasso)
length(betas_plsr)
View(betas_plsr)
full_plsr
full_plsr$coefficients
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5][-1]
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
betas=data.frame(betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
length(betas_plsr)
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
length(betas_plsr)
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
length(betas_plsr)
of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
betas=data.frame(betas_plsr[-1], betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
length(betas_plsr[-1])
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
length(betas_plsr[,5])
betas_plsr
length(betas_plsr)
length(betas_plsr[-1])
betas=data.frame(betas_plsr[-1], betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
View(betas)
View(betas)
lasso_model$beta
"MarriedYes", "EthnicityAsian", "Ethnicity Caucasian")
rownames(betas)=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "GenderFemale", "StudentYes","MarriedYes", "EthnicityAsian", "Ethnicity Caucasian")
save(betas, file="data/betas.RData")
View(mse)
betas_plsr=as.data.frame(betas_plsr)
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5] #lowest number of components is 5
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
length(betas_plsr)
length(betas_ls)
length(betas_ridge)
length(betas_pcr)
length(betas_lasso)
View(betas)
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5] #lowest number of components is 5
betas_ridge=betas_ridge
betas_ls=as.numeric(lm_obj$coefficients)[2:12]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=betas_lasso
betas=data.frame(betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
rownames(betas)=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "GenderFemale", "StudentYes","MarriedYes", "EthnicityAsian", "Ethnicity Caucasian")
save(betas, file="data/betas.RData")
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
View(betas)
as.numeric(betas[1,2:6])
as.numeric(betas[1,1:5])
View(betas)
#Coefficient Plot
png(filename="images/coefficient_plot.png")
plot(seq(1,5, by=1),as.numeric(betas[1,1:5]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,1:5]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,1:5]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,1:5]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,1:5]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,1:5]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,1:5]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,1:5]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,1:5]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,1:5]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,1:5]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("deeppink","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
dev.off()
View(mse)
t(mse)
View(t(mse))
png(filename="images/mse.png")
barplot(t(mse), xaxt="n", main="MSE of Regression Methods")
axis(side=1,labels=c("OLS", "Ridge", "PLS","PCR","Lasso"), at=c(.75,1.95,3.15,4.35,5.55))
dev.off()
load("data/betas.RData")
load("data/betas.RData")
load(file="data/betas.RData")
load(file="data/betas.RData")
getwd()
load(file="../../data/betas.RData")
load("../../data/freq_tables.RData")
knitr::kable(as.data.frame(cor(data[,-c(7,8,9,10)])), digits = 3, caption = 'Correlation Matrix for the Quantitative Variables', caption.placement='top',width=50)
