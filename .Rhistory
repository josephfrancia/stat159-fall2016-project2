lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="red",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-2,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="red",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
betas
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="teal",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("teal","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("deeppink","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
png(filename="images/coefficient_plot.png")
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("deeppink","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
dev.off()
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2")
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-credit.csv")
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-credit.csv")
View(data)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
View(data)
View(data)
dim(data)
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2")
load(file="data/test_train.RData")
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
mse_lm
mse_ridge
mse_plsr
mse_lasso
mse_pcr
mse_pcr
load(file="data/test_train.RData")
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
mse_pcr
predictions
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
library("pls")
train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
pcr_lowest_comp<-which.min(train_model$validation$PRESS)
png(filename="images/validationplot-PCR.jpg")
validationplot(train_model,val.type="MSEP")
dev.off
full_train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
predictions<-predict(full_train_model,ncomps=pcr_lowest_comp,newdata=as.data.frame(test))
predictions
test
predictions
View(test)
(predictions-test[,ncol(test)])^2
mean((predictions-test[,ncol(test)])^2)
mse_pcr<-mean((predictions-test[,"Balance"])^2)
mse_pcr
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-credit.csv")
train<-trainset(data)
test<-testset(data)
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
ncol(train)
ncol(test)
View(train)
View(data)
ncol(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
plot(y_hat-test[,13])
mse_lm=mean((y_hat-test[,13])^2)
save(lm_obj,mse_lm,file="data/lm.RData")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
plot(y_hat-test[,13])
mse_lm=mean((y_hat-test[,13])^2)
save(lm_obj,mse_lm,file="data/lm.RData")
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
View(train)
View(train)
data=data[,-1]
View(data)
train<-trainset(data)
test<-testset(data)
View(train)
ncol(train)
y_hat=predict(lm_obj, newdata=test[,-13])
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
plot(y_hat-test[,13])
mse_lm=mean((y_hat-test[,13])^2)
save(lm_obj,mse_lm,file="data/lm.RData")
mse_lm
(y_hat-test[,13])^2
mean((y_hat-test[,13])^2)
View(test)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data[,-1])
test<-testset(data[,-1])
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
plot(y_hat-test[,13])
mse_lm=mean((y_hat-test[,13])^2)
save(lm_obj,mse_lm,file="data/lm.RData")
mse_lm
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")[,-1]
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")[,-1]
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
library("glmnet")
grid<-10^seq(10, -2, length = 100)
Lasso_CV<-cv.glmnet(x=as.matrix(train[,1:12]),y=as.matrix(train[,13]),alpha=1,lambda=grid)
png(filename="images/mse-plot-lasso.jpg")
plot(x=log(Lasso_CV$lambda),y=Lasso_CV$cvm, xlab="Log Lambda Value",ylab="Mean Cross Validation Error",main="10 Fold Cross Validation")
dev.off()
lambda<-Lasso_CV$lambda.min
train_model<-glmnet(x=as.matrix(train[,1:12]),y=as.matrix(train[,13]),alpha=1,lambda=lambda)
mse_lasso<-mean((test[,13]-predict(train_model,newx=as.matrix(test[,1:12])))^2)
lasso_model<-glmnet(x=as.matrix(data[,1:12]),y=as.matrix(data[,13]),alpha=1,lambda=lambda)
save(mse_lasso,lasso_model,file="data/lasso.RData")
mse_lasso
mse_lm
summary(data$Balance)
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2")
load(file="data/test_train.RData")
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
mse_lm
mse_ridge
mse_lasso
mse_plsr
mse_pcr
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
plot(y_hat-test[,13])
100^2
summary(data$Balance)
View(train)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")[,-1]
View(data)
processed<-model.matrix(~0+., unprocessed_data)
unprocessed_data=data
processed<-model.matrix(~0+., unprocessed_data)
View(processed)
ncol(processed)
mse_lm
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/scaled-Credit.csv")[,-1]
View(data)
View(data)
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
library("glmnet")
grid<-10^seq(10, -2, length = 100)
Lasso_CV<-cv.glmnet(x=as.matrix(train[,1:12]),y=as.matrix(train[,13]),alpha=1,lambda=grid)
png(filename="images/mse-plot-lasso.jpg")
plot(x=log(Lasso_CV$lambda),y=Lasso_CV$cvm, xlab="Log Lambda Value",ylab="Mean Cross Validation Error",main="10 Fold Cross Validation")
dev.off()
lambda<-Lasso_CV$lambda.min
train_model<-glmnet(x=as.matrix(train[,1:12]),y=as.matrix(train[,13]),alpha=1,lambda=lambda)
mse_lasso<-mean((test[,13]-predict(train_model,newx=as.matrix(test[,1:12])))^2)
lasso_model<-glmnet(x=as.matrix(data[,1:12]),y=as.matrix(data[,13]),alpha=1,lambda=lambda)
save(mse_lasso,lasso_model,file="data/lasso.RData")
mse_lasso
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
library(pls)
plsr_obj=plsr(Balance~.,data=train, validation="CV")
min(plsr_obj$validation$PRESS)
#Partial Least Squares Regression Plot
png(filename="images/plot-plsr.png")
plot(plsr_obj)
dev.off()
#Computing MSE of PLSR with optimal Components
y_hat=predict(plsr_obj, ncomp=5, newdata=test[,-13])
mse_plsr=mean((y_hat-test[,13])^2)
#Finding beta coefficients by fitting model on full dataset
full_plsr=plsr(Balance~., data=rbind(train, test), ncomp=5)
betas_plsr=full_plsr$coefficients
#Saving all relevant plsr objects
save(plsr_obj, mse_plsr, betas_plsr, full_plsr, file="data/plsr.RData")
mse_plsr
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
lm_obj=lm(Balance~.,data=train)
y_hat=predict(lm_obj, newdata=test[,-13])
plot(y_hat-test[,13])
mse_lm=mean((y_hat-test[,13])^2)
save(lm_obj,mse_lm,file="data/lm.RData")
mse_lm
#split data into training and test set
source(file="code/functions/test_set.R")
source(file="code/functions/train_set.R")
train<-trainset(data)
test<-testset(data)
library("pls")
train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
pcr_lowest_comp<-which.min(train_model$validation$PRESS)
png(filename="images/validationplot-PCR.jpg")
validationplot(train_model,val.type="MSEP")
dev.off
full_train_model<-pcr(Balance~.,data=as.data.frame(train),validation="CV")
predictions<-predict(full_train_model,ncomps=pcr_lowest_comp,newdata=as.data.frame(test))
mse_pcr<-mean((predictions-test[,"Balance"])^2)
pcr_model<-pcr(Balance~.,data=as.data.frame(data), ncomps=pcr_lowest_comp)
pcr_coefficients<-pcr_model$coefficients
save(mse_pcr,pcr_model,pcr_coefficients,pcr_lowest_comp,file="data/pcr.RData")
mse_pcr
load(file="data/test_train.RData")
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
library(reshape2)
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=as.numeric(betas_ridge)
betas_ls=as.numeric(lm_obj$coefficients)[2:13]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=as.numeric(lasso_model$beta)
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender.Male", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
save(betas,file="data/coef_table.RData")
#Could possibly write a function for this
png(filename="images/coefficient_plot.png")
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("deeppink","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
dev.off()
mse_plsr
mse_lm
mse_ridge
mse_lasso
mse_pcr
library(corrplot)
corrplot(cor(data[,c(2:7,12)]))
plot(cor(data[,c(2:7,12)]))
cor(data[,c(2:7,13)])
png(filename="images/corrplot.png")
cor(data[,c(2:7,13)])
dev.off()
install.packages("corrplot")
library(corrplot)
corrplot(cor(data[,c(2:7,13)]))
#Gender Barchart
png(filename="images/barchart-Gender.png")
barplot(table(data$Gender), main="Barchart of Gender Variable", xlab="Gender")
dev.off()
barplot(table(data$Gender), main="Barchart of Gender Variable", xlab="Gender")
data$Gender.Male
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
library(corrplot)
png(filename="images/corrplot.png")
corrplot(cor(data[,c(2:7,13)]))
View(data)
ncol(data)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project2/data/Credit.csv")
View(data)
ncol(data)
load(file="data/test_train.RData")
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
library(reshape2)
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
#Creating table of coefficients
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=as.numeric(betas_ridge)
betas_ls=as.numeric(lm_obj$coefficients)[2:13]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=as.numeric(lasso_model$beta)
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender.Male", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
save(betas,file="data/coef_table.RData")
#Could possibly write a function for this
png(filename="images/coefficient_plot.png")
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("deeppink","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
dev.off()
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
library(reshape2)
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=as.numeric(betas_ridge)
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
library(reshape2)
#Creating MSE table
mse=data.frame(c(mse_lm, mse_ridge, mse_plsr,mse_pcr,mse_lasso))
rownames(mse)=c("MSE of Least Squares", "MSE of Ridge Regression", "MSE of PLS Regression","MSE of PCR","MSE of Lasso Regression")
colnames(mse)=c("Mean Squared Error")
save(mse,file="data/mse_table.RData")
betas_ridge
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr
betas_ridge=as.numeric(betas_ridge)
betas_ls=as.numeric(lm_obj$coefficients)[2:13]
betas_pcr=as.data.frame(pcr_coefficients)
betas_pcr=betas_pcr[,pcr_lowest_comp]
betas_lasso=as.numeric(lasso_model$beta)
beta_names=c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Gender.Male", "GenderFemale","StudentYes", "MarriedYes", "EthnicityAsian", "EthnicityCaucasian")
betas=data.frame(beta_names,betas_plsr, betas_ls, betas_ridge,betas_pcr,betas_lasso)
colnames(betas)=c("Coefficient Names","Coefficients for PLS Regression", "Coefficients for Least Squares", "Coefficients for Ridge Regression","Coefficients for PCR","Coefficients for Lasso Regression")
save(betas,file="data/coef_table.RData")
#Could possibly write a function for this
png(filename="images/coefficient_plot.png")
plot(seq(1,5, by=1),as.numeric(betas[1,2:6]), xaxt="n", type="l", col="deeppink",xlab="Regression Type", ylab="Coefficient Value", ylim=c(-3,1), main="Coefficient Values For Each Regression")
lines(seq(1,5, by=1),as.numeric(betas[2,2:6]), col="blue")
lines(seq(1,5, by=1),as.numeric(betas[3,2:6]), col="red")
lines(seq(1,5, by=1),as.numeric(betas[4,2:6]), col="yellow")
lines(seq(1,5, by=1),as.numeric(betas[5,2:6]), col="green")
lines(seq(1,5, by=1),as.numeric(betas[6,2:6]), col="orange")
lines(seq(1,5, by=1),as.numeric(betas[7,2:6]), col="purple")
lines(seq(1,5, by=1),as.numeric(betas[8,2:6]), col="black")
lines(seq(1,5, by=1),as.numeric(betas[9,2:6]), col="gray")
lines(seq(1,5, by=1),as.numeric(betas[10,2:6]), col="brown")
lines(seq(1,5, by=1),as.numeric(betas[11,2:6]), col="tomato")
axis(side=1,labels=c("PLS", "OLS", "Ridge","PCR","Lasso"), at=c(1,2,3,4,5))
legend(1.5,-.7, bty="n", c("Income","Limit", "Rating", "Cards", "Age", "Education", "Gender.Male",
"GenderFemale","MarriedYes", "EthnicityAsian","EthnicityCaucasian"),
lty=c(1,1),  lwd=c(2.5,2.5),col=c("deeppink","blue","red", "yellow", "green","orange",
"purple", "black", "gray","brown", "tomato"))
dev.off()
data.frame(betas_ridge)
load(file="data/ridge.RData")
load(file="data/plsr.RData")
load(file="data/lm.RData")
load(file="data/pcr.RData")
load(file="data/lasso.RData")
data.frame(betas_ridge)
as.vector(betas_ridge)
betas_plsr
data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_plsr=as.data.frame(betas_plsr)
betas_plsr=betas_plsr[,5]
betas_lasso=as.numeric(lasso_model$beta)
